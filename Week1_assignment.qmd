---
title: "Untitled"
format: html
editor: visual
---

## Part 1: Variables and Operators

### Task 1. Define and Create variables:

-   `name` as "John"
-   `age` as 28
-   `weight_kg` as 70.5
-   `is_smoker` as FALSE

```{r}
name <- "John"
age <- 28
weight_kg <- 70.5
is_smoker <- FALSE
```

### Task 2. Perform and display the following:

-   Add 5 to `age`
-   Multiply `weight_kg` by 2.2 (convert to pounds)
-   Check if `age` is greater than 18
-   Check if `is_smoker` is TRUE

```{r}
age + 5
weight_kg * 2.2
age > 18
is_smoker == TRUE
```

## Part 2: Decision Making and Loops

### Task 3: if-else

Write an if-else block to classify age group:

-   If age \< 18: "Minor"
-   Else if age \< 60: "Adult"
-   Else: "Senior"

Check if `age` of 20 is displaying correct age group.

```{r}
age <- 20

# Classification
if (age < 18) {
  print("Minor")
} else if (age < 60) {
  print("Adult")
} else {
  print("Senior")
}
```

### Tasks 4: Switch

Write a switch to select a health plan:

-   "basic" â†’ "Basic Plan: \$100/month"
-   "premium" â†’ "Premium Plan: \$200/month"
-   "vip" â†’ "VIP Plan: \$500/month"

Check for monthly cost for premium plan.

```{r}
# Switch case
plan <- "premium"
print(
  switch(plan,
         basic = "Basic Plan: $100/month",
         premium = "Premium Plan: $200/month",
         vip = "VIP Plan: $500/month")
)
```

### Task 5: Loop

Create a Rocket Launch Countdown:

-   The loop counts backward from 10 to 1 using 10:1

-   `paste()` is used to combine `"T-minus"` with the number

-   After the loop finishes, a final message `"ðŸš€ Lift off!"` is shown

```{r}
# Countdown from 10 to 1
for (i in 10:1) {
  print(paste("T-minus", i))
}

# Print launch message after the countdown
print("ðŸš€ Lift off!")

```

## Part 3: Functions

### Task 5: Create Functions

Create a function `bmi_calc(weight, height)` that returns `BMI = weight / heightÂ²` (in meters).

Call the function with `weight = 70` and `height = 1.75`.

```{r}
bmi_calc <- function(weight, height) {
  bmi <- weight / (height^2)
  return(bmi)
}

bmi_calc(70, 1.75)
```

## Part 4: Vectors and Lists

### Task 6: Vectors

Create a numeric vector bp \<- c(120, 125, 118, 135, 110)

Find the average using mean()

Return values \> 120 using filtering

```{r}
bp <- c(120, 125, 118, 135, 110)
mean(bp)
bp[bp > 120]
```

### Task 7: Lists

1.  Create a list with:

-   `Name` : "Jonh"
-   `Age` : 28
-   A vector of `cholesterol` levels: c(200, 180, 190)

2.  Access each item using \$

```{r}
patient <- list(
  name = "John",
  age = 28,
  cholesterol = c(200, 180, 190)
)

patient$name
patient$age
patient$cholesterol
```

## Part 5: Data Frames and Import

### Task 8: Data Frame

1.  Create a data frame `df` with:

![](images/clipboard-4204281435.png){width="447"}

-   Print structure using str()
-   Filter people older than 30

```{r}
df <- data.frame(
  Name = c("John", "Jane", "Alice"),
  Age = c(28, 35, 40),
  Smoker = c(FALSE, TRUE, FALSE)
)

str(df)
df[df$Age > 30, ]

```

### Task 9: Import/Export a XPT File

-   Load built-in dataset using `data(cars)`
-   Write it to a create `.xpt` file in `version 5` and save it in your `data` folder.
-   Read the xpt file back using xpt

```{r}
data(cars)

write_xpt(cars, "data/cars.xpt", version=5)
df_read <- read_xpt("data/cars.xpt")
```
